@import newbinsearch
@import math

<@
def heightOk(tree):
    h = tree.tree_height()
    l = len(tree.inorder())
    if (l == 0):
       return True
    m = math.log(l, 2)
    assert(pre<(tree.inorder())> == tree.inorder())
    return h <= (m + 1)

def items(s):
    l = []
    for i in s:
       l.append(i)
    return sorted(l)

def test_after_reduce(sut): 
    sut.setLog(0)
@>

log: 1 <newbinsearch>.inorder()
log: POST 1 <newbinsearch>.inorder()

pool: <int> 4
pool: <newbinsearch> 3 OPAQUE REF

property: heightOk(<newbinsearch>)
property: <newbinsearch>.is_balanced()

<int> := <[1..20]>

<newbinsearch> := newbinsearch.BST()

~<newbinsearch>.insert(<int>) => \
   (len(<newbinsearch,1>.inorder()) == pre<(len(<newbinsearch,1>.inorder()))>+1) \
   or pre<(<newbinsearch,1>.find(<int,1>))>

~<newbinsearch>.delete(<int>) => \
   (len(<newbinsearch,1>.inorder()) == pre<(len(<newbinsearch,1>.inorder()))>-1) \
   or not pre<((<newbinsearch,1>.find(<int,1>)))>

~<newbinsearch>.find(<int>)

<newbinsearch>.inorder()

~<newbinsearch> == ~<newbinsearch>

len(<newbinsearch,1>.inorder()) > 5 -> <newbinsearch>.display()

reference: newbinsearch.BST ==> set
reference: insert ==> add
reference: delete ==> discard
reference: find ==> __contains__

reference: METHOD(inorder) ==> CALL(items)
reference: METHOD(display) ==> CALL(print)

compare: find
compare: inorder

# New test for find_min and find_max
log: 1 <newbinsearch>.find_min()
log: POST 1 <newbinsearch>.find_max()

# Test successor and predecessor
log: 1 <newbinsearch>.find_successor(<int>)
log: POST 1 <newbinsearch>.find_predecessor(<int>)

# Test tree height
log: 1 <newbinsearch>.tree_height()

# Test if tree is balanced
log: 1 <newbinsearch>.is_balanced()

# Test level order traversal
log: 1 <newbinsearch>.level_order()
