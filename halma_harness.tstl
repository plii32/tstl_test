@import halma_pt2 as halma

# @ indicates raw Python code, such as imports, and is usually not parsed by TSTL, but available for use in testing
<@
def valid_scores(board):
    return board.blue_score >= 0 and board.red_score >= 0

def valid_player(board):
    return board.current_player in ["blue", "red"]

def valid_game_state(board):
    winner = board.checkWinner()
    return winner is None or winner in ["Blue", "Red"]
@>

# Logging -- POST means log after the step executes, the number indicates logging level needed for this logging to appear
log: 1 <halma.Board>.grid
log: POST 1 <halma.Board>.blue_score
log: POST 1 <halma.Board>.red_score
log: POST 1 <halma.Board>.current_player

# Pools are where TSTL stores state of the SUT; here, we define a pool for the Halma game
pool: <int> 4  # Integer pool for board indices (range [0..7])
pool: <halma.Board> 1 OPAQUE  # Pool for the game board object

# Properties are invariants to check after each step of testing
property: valid_scores(<halma.Board>)
property: valid_player(<halma.Board>)
property: valid_game_state(<halma.Board>)

# Initialize an empty game board
<halma.Board> := halma.Board(root=None)

# Initialize an integer pool (valid range for row/column indices)
<int> := <[0..7]>  # Row/Column pool, valid for 8x8 board

# Actions: Select a piece
~<halma.Board>.selectPiece(<int>, <int>) => \
   <halma.Board>.grid[<int>, <int>] is not None and \
   <halma.Board>.grid[<int>, <int>][1] == <halma.Board>.current_player

# Actions: Move a piece
~<halma.Board>.move(<int>, <int>) => \
   <halma.Board>.current_piece is not None and \
   (<int>, <int>) in <halma.Board>.generateMoves(*<halma.Board>.current_piece)

# Actions: AI makes a move (if current player is "red")
~<halma.Board>.AI_makeMove() -> \
   <halma.Board>.current_player == "red" => \
   <halma.Board>.AI_makeMove()

# Check winner (after every action to ensure game is progressing correctly)
~<halma.Board>.checkWinner()

# After performing actions, ensure that game state is consistent
~<halma.Board> == ~<halma.Board>

# Logging for debugging
len(<halma.Board>.grid) > 0 -> <halma.Board>.display()

# Reference comparison: Halma board logic could be compared with a simpler reference model (if available)
reference: halma.Board ==> simplifiedBoardModel  # Example if you have a simpler reference
reference: selectPiece ==> selectPiece_reference  # Define the reference equivalent for validation
reference: move ==> move_reference
reference: checkWinner ==> checkWinner_reference

# Compare methods: after actions, compare results to the reference model
compare: selectPiece
compare: move
compare: checkWinner
