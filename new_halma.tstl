@import halma_pt1 as halma

# Define Python helper functions for testing
<@
def valid_scores(board):
    """Ensure both players have non-negative scores."""
    return board.blue_score >= 0 and board.red_score >= 0

def valid_player(board):
    """Ensure the current player is valid."""
    return board.current_player in ["blue", "red"]

def valid_game_state(board):
    """Check if the game state is valid."""
    winner = board.checkWinner()
    return winner is None or winner in ["Blue", "Red"]
@>

# Logging -- Monitor key states during testing
log: POST 1 board.grid
log: POST 1 board.blue_score
log: POST 1 board.red_score
log: POST 1 board.current_player

# Define state pools
pool: <int> row_or_col  # Integer pool for board indices (range [0..7])
pool: <halmaBoard> board  # Pool for the Halma game board object

# Properties to check after each test step
property: valid_scores(board)
property: valid_player(board)
property: valid_game_state(board)

# Initialize the game board
board := halma.Board(root=None)

# Initialize an integer pool for board indices
row_or_col := <[0..7]>

# Actions: Select a piece
~board.selectPiece(row_or_col, row_or_col) -> \
   board.grid[row_or_col, row_or_col] is not None and \
   board.grid[row_or_col, row_or_col][1] == board.current_player

# Actions: Move a piece
~board.move(row_or_col, row_or_col) -> \
   board.current_piece is not None and \
   (row_or_col, row_or_col) in board.generateMoves(*board.current_piece)

# Check winner (after each step)
board.checkWinner()
